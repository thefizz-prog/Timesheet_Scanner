
Sub pullTimesheetInfo(TheSourceFile, staffCode, currentWorkWeek)
    
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' This macro takes information from the staff timesheet (provided all checks are passed)
    ' and deposits the info into the project cost control file in the correct location , project code and staff code
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
    
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' ARGUMENTS
    ' TheSourceFile = the staff timesheet file directory
    ' staffCode  = unique staff identifier
    ' currentWorkWeek = the current workweek
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
    
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' Declaring variables
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                                                    
                                                    ' TheSourceFile will be a staff timesheet variable supplied by pullTimesheetInfo P.A.D flow & currentWorkWeek is a variable that is supplied by pullTimesheetInfo P.A.D flow
                                                    ' staffCode is supplied by the loop in PAD and points the sub to open the correct staff timehsheet file to pull the timesheet info from
    Dim src As Workbook                             ' declaring source workbook (source = staff timesheet = variable)
    Dim currentWeekWorksheet As Worksheet           ' declaring worksheet for the current work week
    Dim master As Worksheet                          ' declaring master workbook (yearRow.e this project cost control file)
    Dim WeekNumber As String                        ' declaring variable to get weeknumer
    Dim temp As String                              ' temp variable for int to string conversion



    Set master = ThisWorkbook.Worksheets("Entry")                                   ' Setting master workbook to point towards the Entry worksheet of this project cost control doc.
    Set src = Workbooks.Open(TheSourceFile, 0, True)        ' Open the source file. UPDATE LINKS = 0 here as version claudine sent me has a broken link. Please consult with Gordon.
    temp = CStr(currentWorkWeek)                                'convert week number to string
    WeekNumber = "WW" + temp                       ' append week number to WW so it matches with staff timesheet.worksheet. naming convention
    

    
    Set currentWeekWorksheet = src.Worksheets(WeekNumber)       ' gets the worksheet in the staff timesheet that matches the current workweek number


    
    
    Dim last_row As Long
    last_row = master.Cells(Rows.Count, 1).End(xlUp).Row          'variable to hold #columns/#staff on the Entry worksheet to loop through column "D" to match the year on Entry worksheet with the year on the staff timesheet
    last_column = master.Cells(2, Columns.Count).End(xlToLeft).Column       'variable to hold #columns/#project codes on this project cost control worksheet. If columns are added here, fine but the starting location must always be the same!
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' Loops through the rows until correct year is found.
    ' Loop from here to find the correct week
    ' Loop from here to find the correct staff code
    ' Loop from here to find the correct column/project code to add to
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    
    ' Loops from from row =1 to last used row in Entry worksheet
    For yearRow = 1 To last_row
        Dim thisFileEntryWeekNumber As String
        Dim currentWorkWeek1 As String
        Dim thisFileProjectNumber As String
        Dim temp4 As String


        Dim thisFileProjectCodes As String
        Dim staffTimesheetProjectCode() As String

        Dim thisFileWorkWeek As String
        Dim thisFileStaffInitials As String
        Dim staffTimesheetStaffInitials As String

        Dim theDate As Date
            theDate = Now()         ' needed to add the edited date on the entry worksheet of this workbook
        
        thisFileProjectNumber = CStr(master.Cells(2, 1).Value)  ' PROJECT Number for this project cost control file.

        If master.Cells(yearRow, 4).Value = currentWeekWorksheet.Cells(1, 8).Value Then   ' loops through available years on project cost control document until match found with year on staff timesheet
           For yearWeekRow = yearRow To last_row
                thisFileEntryWeekNumber = CStr(master.Cells(yearWeekRow, 3).Value)  ' Gets WEEK NUMBER - loops through all years in which the current project cost control file exists. converts to string for comparison
                currentWorkWeek1 = CStr(currentWorkWeek)           'gets CURRENT YEAR in staff timesheet worksheet
            If thisFileEntryWeekNumber = currentWorkWeek1 Then

               ' msgbox "YES, Match for year:" & currentWeekWorksheet.Cells(1, 8).Value & vbNewLine & " Master week:" & master.Cells(yearRow, 3).Value & " Timesheet week:" & temp

                For yearWeekResourceRow = yearWeekRow To last_row
                    thisFileWorkWeek = CStr(master.Cells(yearWeekResourceRow, 1).Value)          ' converts column A/ Wk number to a string for comparison to currentWorkWeek (given from PAD)
                    thisFileStaffInitials = CStr(master.Cells(yearWeekResourceRow, 4).Value)          ' converts STAFF INITALS on project cost control -Entry sheet for comparions against staff timesheet - staff initials
                    staffTimesheetStaffInitials = CStr(currentWeekWorksheet.Cells(1, 11).Value)          ' GETS staff timesheet - staff initals

                    If currentWorkWeek1 = thisFileWorkWeek And thisFileStaffInitials = staffTimesheetStaffInitials Then                           ' if project cost control - current week + staff timsheet - current week match AND Staff timesheet - staff initial matches project cost control - active staff - staff initials
                       ' msgbox "Pointing at row:" & yearWeekResourceRow

                        For rowTimesheet = 7 To 19
                            If currentWeekWorksheet.Cells(rowTimesheet, 1).Value = thisFileProjectNumber Then ' if project cost control project code = Project number on staff timesheet

                           ' msgbox "searching for project codes:" & currentWeekWorksheet.Cells(rowTimesheet, 1).Value      ' project code to search for
                            'MsgBox "Staff timesheet point: " & currentWeekWorksheet.Cells(rowTimesheet, 1).Value & "-" & currentWeekWorksheet.Cells(rowTimesheet, 2).Value & "-" & currentWeekWorksheet.Cells(rowTimesheet, 5).Value ' just confirming that info is correct
                                For projectCodeColumn = 6 To last_column
                                ' MsgBox "Looping though Project code:" & master.Cells(2, projectCodeColumn).Value ' just ensuring that all project codes are captured


                                    thisFileProjectCodes = master.Cells(2, projectCodeColumn).Value ' loops through project cost control project codes &  converts to string for comparison
                                    staffTimesheetProjectCode = Split(CStr(currentWeekWorksheet.Cells(rowTimesheet, 2).Value), ":") ' ' loops through staff timesheet project codes &  converts to string for comparison and parses 3 digit code before the ":" to compars against project cost control - project code
                                    
                                    
                                    
                                    If thisFileProjectCodes = staffTimesheetProjectCode(0) Then   ' if project cost control - project code = staff timesheet project code
                                    '    MsgBox "thisFileProjectCodes:" & thisFileProjectCodes & vbNewLine & "staffTimesheetProjectCode:" & staffTimesheetProjectCode(0)
                                        Dim thisFileEntryExistingHours As Integer        ' variable to hold cell value if project cost control - project code cell already has a value it it
                                        'MsgBox "thisFileProjectCodes:" & thisFileProjectCodes
                                        'MsgBox "Monday" & currentWeekWorksheet.Cells(rowTimesheet, 6).Value & vbNewLine & "Tuesday" & currentWeekWorksheet.Cells(rowTimesheet, 9).Value & vbNewLine & "Wednesday" & currentWeekWorksheet.Cells(rowTimesheet, 12).Value & vbNewLine & "Thursday" & currentWeekWorksheet.Cells(rowTimesheet, 15).Value & vbNewLine & "Friday" & currentWeekWorksheet.Cells(rowTimesheet, 18).Value & vbNewLine & "Saturday" & currentWeekWorksheet.Cells(rowTimesheet, 21).Value & vbNewLine & "Sunday" & currentWeekWorksheet.Cells(rowTimesheet, 24).Value
                                        If Not IsEmpty(master.Cells(yearWeekResourceRow, projectCodeColumn).Value) Then   ' if project cost control - project code cell !=empty
                                           thisFileEntryExistingHours = master.Cells(yearWeekResourceRow, projectCodeColumn).Value                ' hold this value
                                      '     MsgBox "Temp variable:" & thisFileEntryExistingHours & vbNewLine & "Row:" & yearWeekResourceRow & vbNewLine & "Column" & projectCodeColumn & "Master:" & master.Cells(yearWeekResourceRow, projectCodeColumn).Value

                                        End If
                                            master.Cells(yearWeekResourceRow, projectCodeColumn).Value = (currentWeekWorksheet.Cells(rowTimesheet, 7).Value + currentWeekWorksheet.Cells(rowTimesheet, 10).Value + currentWeekWorksheet.Cells(rowTimesheet, 13).Value + currentWeekWorksheet.Cells(rowTimesheet, 16).Value + currentWeekWorksheet.Cells(rowTimesheet, 19).Value + currentWeekWorksheet.Cells(rowTimesheet, 22).Value + currentWeekWorksheet.Cells(rowTimesheet, 25).Value + thisFileEntryExistingHours)  ' adds all the hours under staff timesheet - project code including previous project cost control - project code values. ensures that hours are not overwritten
                                            'MsgBox "Value:" & master.Cells(yearWeekResourceRow, projectCodeColumn).Value & vbNewLine & "Row:" & yearWeekResourceRow & vbNewLine & "Column:" & projectCodeColumn
                                            thisFileEntryExistingHours = 0

                                    End If

                                Next projectCodeColumn

                            End If

                        Next rowTimesheet
                    End If
               Next yearWeekResourceRow

            End If
        Next yearWeekRow
        End If
    Next yearRow
    
    
    master.Cells(2, 4).Value = theDate  ' Add the date of edit as the final change to the workbook before saving
    src.Close False
    Set src = Nothing



End Sub
